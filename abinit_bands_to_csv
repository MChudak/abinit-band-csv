#!/usr/bin/python3
# -*- coding: utf-8 -*-
'''
Created on 27-04-2012 18:43:25
@author: Maciej Chudak

Output data order:
path length, kx, ky, kz, one or more band energy value 
'''
import argparse, re, sys, csv
from math import sqrt

parser=argparse.ArgumentParser(description='Extract band structure data from '+
                               'Abinit .out file as convenient .csv. Outputs '+
                               'to stdout.')
parser.add_argument('input_file', type=str, nargs=1,
                   help='path of the .out file')
args=parser.parse_args()

# raw strings as regexps
regexps={"header":r"Eigenvalues \( *(\w+) *\) for nkpt= *([0-9]+) *k points:",
         "coords":r"kpt= +([\-0-9\.]+) +([\-0-9\.]+) +([\-0-9\.]+)",
         "value" :r"([\-0-9\.]+)"}


def find_datasets(file):
    datasets=[]
    data_lines_ahead=0
    for line in file:
        if data_lines_ahead==0:     # if not in a data block:
            header=re.search(regexps["header"], line)
            if header:
                datasets.append(list(header.groups()))
                datasets[-1].append(list())
                # int()*2 because there are 2 lines per k point:
                data_lines_ahead=int(header.groups()[1])*2
        else:                       # if in a data block:
            datasets[-1][2].append(line)
            data_lines_ahead-=1
    return datasets


def convert_to_csv(dataset, ostream, name=None):
    # dataset should be an object returned by the "find_datasets" function,
    # ostream should be a csv.writer object
    ostream.writerow([
" Band structure: file generated from Abinit "+name+" file. "])
    ostream.writerow([
" Eigenvalues ("+dataset[0]+") for nkpt= "+dataset[1]+" k points: "])
    
    path_length=0.0
    out_line=[]
    k=[0.0, 0.0, 0.0]
    k_old=[0.0, 0.0, 0.0]

    for line in dataset[2]:
        coords=re.search(regexps['coords'], line)
        
        if coords:
            out_line.append(path_length)
            step_squared=0.0
            
            for i in range(3):
                k[i]=float(coords.groups()[i])
                out_line.append(k[i])
                step_squared+=(k[i]-k_old[i])**2
            
            path_length+=sqrt(step_squared)
            k_old=list(k)
        
        else:
            for match in re.findall(regexps['value'], line):
                out_line.append(match)
            ostream.writerow(out_line)
            out_line=[]


if __name__=="__main__":
    with open(args.input_file[0], "r") as inf:
        datasets=find_datasets(inf)

    ostream=csv.writer(sys.stdout, delimiter=' ', escapechar='\\',
                      quoting=csv.QUOTE_MINIMAL, quotechar='#')

    convert_to_csv(datasets[-1], ostream, args.input_file[0])










